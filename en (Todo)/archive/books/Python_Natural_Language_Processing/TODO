TODO

2019-07-29(Mon) 18:13pm
Start from 6-CNN Classification

## Refactorize all the codes for better readability
v 1
v 2
v 3
v 4
 5
 6

## Fix error(s)

### v kaggle-word2vec-nlp-tutorial-5_modeling_with_rnn.py
#### Problem
$ python kaggle-word2vec-nlp-tutorial-5_modeling_with_rnn.py
...
Traceback (most recent call last):
  File "kaggle-word2vec-nlp-tutorial-5_modeling_with_rnn.py", line 95, in <module>
    print( type( prepro_configs['vocab_size'] ) )
TypeError: string indices must be integers
$

#### Hint
I tracked down prepro_configs and found the .json file was not properly stored.

#### Solution
I fixed the part to save the .json file and this problem was solved!

### v kaggle-word2vec-nlp-tutorial-2_data_preprocessing.py
#### Problem 1: bs4.FeatureNotFound error

$ ! pip install bs4
$ python kaggle-word2vec-nlp-tutorial-2_data_preprocessing.py
...
bs4.FeatureNotFound: Couldn't find a tree builder with the features you requested: html5lib. Do you need to install a parser library?
...
$

#### Hint
* Source Code
def preprocessing( review, remove_stopwords=True, remove_html_tags=True, verbose=False ):
    # Remove html tags
    if remove_html_tags:
        review = BeautifulSoup( review, 'html5lib').get_text()

* Installing a parserÂ¶
  Another alternative is the pure-Python html5lib parser, which parses HTML the way a web browser does. Depending on your setup, you might install html5lib with one of these commands:
    $ apt-get install python-html5lib
    $ easy_install html5lib
    $ pip install html5lib
Source: https://www.crummy.com/software/BeautifulSoup/bs4/doc/

#### Solution
$ pip install html5lib
As soon as the parser was installed, the problem has been solved!

#### Problem 2: AttributeError
AttributeError: module 'tensorflow._api.v1.data' has no attribute 'shuffle'

#### Hint
* Source code

def train_input_fn():
    ...
    dataset  = tf.data.shuffle( buffer_size=50000 )
    ...


## Write a code

To increase the readability,
### v def save() -> def save2np()
file = dir_data_out + file_test_input_data
with open( file, 'wb') as f:
    np.save( f, file_test_input_data )
    print(f'Saved to {file}...')
->
save( file_test_input_data, 'wb' )

* The default option is 'w'
save( file_test_input_data, 'w' ) or
save( file_test_input_data )
### v def load() -> def load_np() & def load_json()

file = dir_data_out + file_train_input_data
with open( file, 'rb') as f:
    input_data = np.load( f )
    print(f'Loaded from {file}...')
->
load( file_train_input_data, 'rb' )
