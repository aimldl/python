# -*- coding: utf-8 -*-
"""
j2p-02_3-list.py
jump2python

p.66, 리스트 자료형
"""

#%%##############################
# 리스트는 어떻게 만들고 사용할까 #
#################################
# n개의 요소를 포함하는 리스트를 만들기
# 리스트명 = [요소0, 요소1, ...요소n-1]
odd = [1, 3, 5, 7, 9]

# 다양한 리스트의 생김새
#   d,e처럼 숫자와 문자열을 함께 요소값으로 가질 수 있다.
a = []
b = [1,2,3]
c = ['Life','is','too','short']
d = [1,2,'Life','is']
e = [1,2,['Life','is']]

#%%#########################
# 리스트의 인덱싱과 슬라이싱 #
############################
##################
# 리스트의 인덱싱 #
##################

a = [1,2,3]
a[0]
# 1
a[0]+a[2]  # 1+3
# 4
a[-1]  # The last element
# 3

# A list of lists: 리스트 안에 다른 리스트를 포함하는 예
a = [1,2,3,['a','b','c']]
a[0]
# 1
a[-1]
# ['a', 'b', 'c']
a[3]
# ['a', 'b', 'c']

a[-1][0]
# 'a'
a[-1][1]
# 'b'
a[-1][2]
# 'c'

#############################
# 삼중 리스트에서 인덱싱 하기 #
#############################
# 조금 더 복잡한 인덱싱 예
# 삼중 중청은 복잡해서 자주 사용되지는 않지만 알아두자.
a = [1,2,['a','b',['Life','is']]]

a[2][2][0]
# 'Life'
a[2][2][1]
# 'is'

####################
# 리스트의 슬라이싱 #
####################
a = [1,2,3,4,5]
a[0:2]
# [1, 2]

# 문자열의 슬라이싱과 비교
# 슬라이싱의 사용법이 동일하다!
a = "12345"
a[0:2]
# '12'

# 몇 가지 예
a = [1,2,3,4,5]
b = a[:2]  # 처음부터 2까지
c = a[2:]  # 2부터 끝까지
b
# [1, 2]
c
# [3, 4, 5]

#################################
# 중첩된 리스트에서 슬라이싱 하기 #
#################################
# 중첩된 리스트에서도 슬라이싱 방법은 똑같다.
a = [1,2,3,['a','b','c'], 4,5]
a[2:5]
#[3, ['a', 'b', 'c'], 4]
a[3][:2]
# ['a', 'b']

#%%#############
# 리스트 연산자 #
################
# 1. 리스트 더하기 (+)
a = [1,2,3]
b = [4,5,6]
a + b
# [1, 2, 3, 4, 5, 6]

# 2. 리스트 반복하기 (*)
a = [1,2,3]
a * 3
# [1, 2, 3, 1, 2, 3, 1, 2, 3]

# 초보자가 범하기 쉬운 리스트 연산 오류
a = [1,2,3]

# 아래와 같이 입력했을 때 결과값은?
# a[2] + "hi"
# TypeError: unsupported operand type(s) for +: 'int' and 'str'
# 에러 수정을 위해서는 아래와 같이 입력!
str( a[2] )+"hi"
# '3hi'

#%%#########################
# 리스트의 수정, 변경과 삭제 #
############################
# 1. 리스트에서 하나의 값 수정하기
a = [1,2,3]
a[2] = 4
a
# [1, 2, 4]

# 2. 리스트에서 연속된 범위의 값 수정하기     # GREP
a = [1,2,3]                                 # GREP
a[1:2]                                      # GREP
# [2]                                       # GREP
a[1:2] = ['a','b','c']                      # GREP
a                                           # GREP
# [1, 'a', 'b', 'c', 4]                     # GREP
# [1, ['a', 'b', 'c'], 4]가 아님에 주의      # GREP

# 리스트 수정할 때 주의할 점                  # GREP
#   위와 같이 슬라이싱이 아닌,                # GREP
#   아래와 같은 요소로 수정하면 결과가 다르다. # GREP
a = [1,2,3]                                 # GREP
a[1] = ['a','b','c']                        # GREP
a                                           # GREP
# [1, ['a', 'b', 'c'], 3]                   # GREP

# 3. [] 사용해 리스트 요소 삭제하기
a = [1,2,3]
a[2] = 4
a[1:2] = ['a','b','c']
a
# [1, 'a', 'b', 'c', 4]
a[1:3] = []
a
# [1, 'c', 4]

# 4. del함수 사용해 리스트 요소 삭제하기
#   del 객체
#     는 Python이 내장하는 삭제함수이다.
#   del a[x]
#     는 x번째 요소값을 삭제한다.
#   del a[x:y]
#     는 x번째부터 y번째 요소 사이의 값을 삭제한다.

a
# [1, 'c', 4]
del a[1]
a
# [1, 4]

#%%##################
# 리스트 관련 함수들 #
#####################

# 리스트에 요소 추가 (append)
a = [1,2,3]
a.append(4)
a
# [1, 2, 3, 4]
a.append( [5,6] )  # 리스트 안에 리스트를 append했다.
a
# [1, 2, 3, 4, [5, 6]]

# 리스트 정렬 (sort)
#   정렬을 하나, 이 값을 리턴하지 않는 점에 주의
#   리턴받고 싶을 때는 b = sorted(a)
a = [1,4,3,2]
a.sort()
a
# [1, 2, 3, 4]

a = ['a','c','b']
a.sort()
a
# ['a', 'b', 'c']

# 리스트 뒤집기 (reverse)
a = ['a','c','b']
a.reverse()
a
# ['b', 'c', 'a']

# 위치 반환 (index)
#   index(x)함수는
#     리스트에 x라는 값이 있으면 x의 위치값을 리턴하고,
#                   값이 없으면 ValueError를 리턴한다.
a = [1,2,3]
a.index(3)
# 2
a.index(1)
# 0
a.index(0)
# ValueError: 0 is not in list

# 리스트에 요소 삽입 (insert)
#   insert(a,b)는 리스트의 a번째 위치에 b를 삽입한다.
#   주의: 파이썬 리스트는 0에서 시작한다.
a = [1,2,3]
a.insert(0,4)
a
# [4, 1, 2, 3]
a.insert(3,5)
a
# [4, 1, 2, 5, 3]

# 리스트 요소 제거 (remove)
#   remove(x)는 첫 번째 나오는 x를 삭제한다.
a = [1,2,3,1,2,3]
a.remove(3)
a
# [1, 2, 1, 2, 3]
a.remove(3)
a
# [1, 2, 1, 2]

#리스트 요소 끄집어 내기 (pop)
#  pop()은 리스트의 마지막 요소를 리턴하고, 그 요소를 삭제한다.
#  pop(x)는 리스트의 x번째 요소를 리턴하고, 그 요소를 삭제한다.
a = [1,2,3]
a.pop()
# 3
a
# [1, 2]

a = [1,2,3]
a.pop(1)
# 2
a
# [1, 3]

# 리스트에 포함된 요소 x의 개수 세기 (count)
#   count(x)는 리스트 내에 x가 몇 개 있는지 카운트해서 리턴한다.
a = [1,2,3,1]
a.count(1)
# 2

# 리스트 확장 (extend)
#   extend(x)에서 x에는 리스트만 올 수 있다.
#   원래의 a 리스트에 x리스트를 더하게 된다.
a = [1,2,3]
a.extend( [4,5] )
a
# [1, 2, 3, 4, 5]

b = [6,7]
a.extend(b)
a
# [1, 2, 3, 4, 5, 6, 7]
